running_total
# use a for loop to change the values in the vector months to upper case
for (i in 1:length(months)) {
months[i] <- toupper(months[i])
}
# display the vector
months
# change it back
for (i in 1:length(months)) {
months[i] <- tolower(months[i])
}
# use a for loop to change only some values in a vector. Change only the months that start with J to upper case.
for (i in 1:length(months)) {
if (substr(months[i], 1, 1) == "j") {
months[i] <- toupper(months[i])
}
}
# display the vector
months
# create your own functions
print_greeting <- function() {
print("Greetings Earthling!")
}
# run the function
print_greeting()
# a function that takes in two numbers and adds them together
add_em_up <- function(first_number, second_number){
calculation = first_number + second_number
print(calculation)
}
# run the function
add_em_up(12, 14)
# a function that looks through the months vector and prints the month if the month starts with "m"
check_index <- function() {
for (i in 1:length(months)) {
if (substr(months[i], 1, 1) == "m") {
print(months[i])
}
}
}
# run the function
check_index()
# the same function as check_index but this time takes a letter as a parameter and prints if a month has that letter
check_index2 <- function(letter) {
for (i in 1:length(months)) {
if (substr(months[i], 1, 1) == letter)
{print(months[i])
}
}
}
# test the function
check_index2("m")
# test the function again
check_index2("x")
# run the function
check_index()
reticulate::repl_python()
yes
reticulate::repl_python()
#Create a vector named Ones that contains the numbers from 1 to 5.
Ones <- 1:5
Twos <- seq(2, 10, by=2)
Threes <- seq(3, 15, by=3)
Fours <- seq(4, 20, by=4)
Fives <- seq(5, 25, by=5)
times_table <- data.frame(
CH_One = Ones,
CH_Two = Twos,
CH_Three = Threes,
CH_Four = Fours,
CH_Five = Fives
)
View(times_table)
#Create another vector named Sixes. This vector should contain 5 values
# beginning at 6 and counting by 6.
Sixes <- seq(6, 30, by=6)
# Use the rbind() function to add Sixes to your times_table data frame.
# Make sure you have a name for the new column that follows the naming
# convention in step 6.
new_row <- data.frame(CH_One = NA, CH_Two = NA, CH_Three = NA, CH_Four = NA, CH_Five = NA, CH_Six = Sixes)
times_table <- rbind(times_table, new_row)
# Use the rbind() function to add Sixes to your times_table data frame.
# Make sure you have a name for the new column that follows the naming
# convention in step 6.
new_row <- data.frame(
CH_One = NA,
CH_Two = NA,
CH_Three = NA,
CH_Four = NA,
CH_Five = NA,
CH_Six = Sixes
)
colnames(new_row) <- colnames(times_table)
times_table <- rbind(times_table, new_row)
times_table <- data.frame(
CH_One = Ones,
CH_Two = Twos,
CH_Three = Threes,
CH_Four = Fours,
CH_Five = Fives
)
#Create another vector named Sixes. This vector should contain 5 values
# beginning at 6 and counting by 6.
Sixes <- seq(6, 30, by=6)
# Use the rbind() function to add Sixes to your times_table data frame.
# Make sure you have a name for the new column that follows the naming
# convention in step 6.
rbind(times_table, Sixes)
# Create a vector named Ones that contains the numbers from 1 to 5.
# In this script create a vector named Twos that contains the numbers from
# 2 to 10 counting by 2 like this: Twos <- c(seq(from = 2, to = 10, by = 2))
# Create three more vectors, named Threes, Fours, and Fives.
# Vector Threes should count by threes and include 5 values.
# Vector Fours should count by fours and contain five numbers.
# Vector Fives should count by fives and contain five numbers.
Ones <- 1:5
Twos <- seq(2, 10, by=2)
Threes <- seq(3, 15, by=3)
Fours <- seq(4, 20, by=4)
Fives <- seq(5, 25, by=5)
#Create a data frame named times_table that combines your 5 vectors.
# Include a name for each column using this naming convention replacing
# Initials with your initials.
initials <- "CH"
# Create a vector named Ones that contains the numbers from 1 to 5.
# In this script create a vector named Twos that contains the numbers from
# 2 to 10 counting by 2 like this: Twos <- c(seq(from = 2, to = 10, by = 2))
# Create three more vectors, named Threes, Fours, and Fives.
# Vector Threes should count by threes and include 5 values.
# Vector Fours should count by fours and contain five numbers.
# Vector Fives should count by fives and contain five numbers.
Ones <- 1:5
Twos <- seq(2, 10, by=2)
Threes <- seq(3, 15, by=3)
Fours <- seq(4, 20, by=4)
Fives <- seq(5, 25, by=5)
#Create a data frame named times_table that combines your 5 vectors.
# Include a name for each column using this naming convention replacing
# Initials with your initials.
times_table <- data.frame(
CH_One = Ones,
CH_Two = Twos,
CH_Three = Threes,
CH_Four = Fours,
CH_Five = Fives
)
#Create another vector named Sixes. This vector should contain 5 values
# beginning at 6 and counting by 6.
Sixes <- seq(6, 30, by=6)
# Use the rbind() function to add Sixes to your times_table data frame.
# Make sure you have a name for the new column that follows the naming
# convention in step 6.
rbind(times_table, Sixes)
# Use the cbind() function to add an additional column to your times_table
# data frame using the Sixes vector, making sure to follow the column naming
# convention from step 7 .
CH_Six <- Sixes
times_table <- cbind(times_table, CH_Six)
# Compose 4 separate R commands that look for the following in your
# times_table data frame.
#    One command that looks for row 2 using the data frame index.
row_2 <- times_table[2, ]
print(row_2)
print(times_table)
#    2. One command that looks for rows 2, 3, and  4 using the data frame index.
rows_2thru4 <- times_table[2:4, ]
print(rows_2thru4)
#    3. One command that looks for Initials_Threes by it’s column name.
col_Threes <- times_table$CH_Three
print(col_Threes)
#    4. One command that looks for all rows in the data frame but only the
#     first 3 columns.
subset_3_cols <- times_table[, 1:3]
print(subset_3_cols)
# Create a vector of pirate captain names. You can use any names you like,
# but make sure you have 5 or more names in your vector. The first vector
# value should be your first name.
pirate_captains <- c("Crystal", "Monkey D. Luffy", "Buggy", "Kuro", "Arlong")
#Create a second vector of crew sizes. This vector should contain the number
# of crew members for each captain you named in the previous step. At least
# one value in the CrewSize vector should be bigger than 5.
CrewSize <- c(10, 13, 26, 5, 12)
# Create a data frame named ships where the first column stores the captain’s
# name, and the second column stores the crew sizes. Give the first column the
# name of Captain and the second column the name of CrewSize.
ships <- data.frame(Captain = pirate_captains, CrewSize = CrewSize)
print(ships)
# Use the single bracket selector to select the column named CrewSize, (pos 2).
print(ships[ ,2])
print(ships$CrewSize)
# Use the $ selector to select the vector for the column named Captain
print(ships$Captain)
# Use the rbind() function to add a row for another captain and crew size, when
# you do use a list, not a vector to store the data for the row.
ships <- rbind(ships, data.frame(Captain="Shanks", CrewSize=18))
print(ships)
for (size in ships$CrewSize) {
print(size)
}
# Create a vector that is called yourlastname, substituting your last name.
# The vector should have 5 text values in it. It can be anything you like:
# sports teams, dog breeds, types of tea, etc.
hollis <- c("Devil Fruit", "Grand Line", "Haki", "One Piece", "Yonko")
# Print the value in the 4th position of vector, using single bracket selector.
print(hollis[4])
if (item == hollis[3]) {
print(item)
} else {
print("not the third value")
}
# Code a For Loop with an IF statement that prints the third value.
for (item in hollis) {
if (item == hollis[3]) {
print(item)
} else {
print("not the third value")
}
}
welcome_message <- function(parameter) {
print(paste("Hello, welcome", parameter, "to our ship!"))
}
welcome_message("Zoro")
subtract_and_multiply <- function(num1, num2) {
firstvariable <- num2 - num1
secondvariable <- num1 * num2
print(paste(num2, "subtracted from", num1, "is", firstvariable))
print(paste(num1, "multiplied by", num2, "is", secondvariable))
}
subtract_and_multiply(5, 10)
source("~/Library/CloudStorage/OneDrive-MagnaMediaArtsLLC/Grad School DSAI/ITSE 2309 Database Programming/Labs/Lab5/hollislab5.R", echo=TRUE)
# Dataset File: ramen-ratings.csv, in ~/data/ramen-ratings.csv
# Load required packages
library(tidyverse)
ramen <- read_csv("ramen-ratings.csv")
ramen <- read_csv("~/data/ramen-ratings.csv")
ramen <- read_csv("data/ramen-ratings.csv")
library(readr)
ramen_ratings <- read_csv("OneDrive - Magna Media Arts LLC/Grad School DSAI/ITSE 2309 Database Programming/Labs/Lab5/data/ramen-ratings.csv")
View(ramen_ratings)
# Current Directory
getwd()
# Set Directory
# Copy and paste filepath to where ramen-ratings.csv is located
setwd("/Users/magnamediaartsllc/GitHub/DallasCollege_Portfolio/ITSE2309_DatabaseProgramming/Lab5/data")
# Verify Current Directory
getwd()
ramen <- read_csv("ramen-ratings.csv")
# Check the first few rows
head(ramen)
# Check column names
names(ramen)
# 2.	Create a bar plot that shows the count of rows for each style.
ggplot(ramen, aes(x = Style)) +
geom_bar(fill = "skyblue") +
ggtitle("Count of Ramen by Style") +
xlab("Style") +
ylab("Count")
View(ramen)
# 2.	Create a bar plot that shows the count of rows for each style.
ggplot(ramen, aes(x = Style)) +
geom_bar(fill = "skyblue") +
ggtitle("Count of Ramen by Style") +
xlab("Style") +
ylab("Count of Rows")
# 3.	Create a box plot that shows the distribution of the Stars values for
#     each style.
ggplot(ramen, aes(x = Style, y = Stars, color = Style)) +
geom_boxplot() +
ggtitle("Stars Distribution by Style") +
xlab("Style") +
ylab("Stars")
# 3.	Create a box plot that shows the distribution of the Stars values for
#     each style.
# Remove rows with NA Stars (removing "Unrated")
ramen <- ramen %>% filter(!is.na(Stars))
# Box plot showing showing Stars per style
ggplot(ramen, aes(x = Style, y = Stars, color = Style)) +
geom_boxplot() +
ggtitle("Stars Distribution by Style") +
xlab("Style") +
ylab("Stars")
# Convert Stars to numeric (forcing "Unrated" to NA)
ramen <- ramen %>%
mutate(Stars = as.numeric(Stars))
# Remove rows with NA Stars (removing "Unrated")
ramen <- ramen %>% filter(!is.na(Stars))
# Box plot showing showing Stars per style
ggplot(ramen, aes(x = Style, y = Stars, color = Style)) +
geom_boxplot() +
ggtitle("Stars Distribution by Style") +
xlab("Style") +
ylab("Stars")
# Current Directory
getwd()
# Set Directory
# Copy and paste filepath to where ramen-ratings.csv is located
setwd("/Users/magnamediaartsllc/GitHub/DallasCollege_Portfolio/ITSE2309_DatabaseProgramming/Lab5/data")
# Verify Current Directory
getwd()
# Load required packages
library(tidyverse)
#Tasks
# 1.	Read the data from the CSV file into a tibble and display it. To do that,
#     you can use the read_csv() function like this:
#       ramen <- read_csv("ramen-ratings.csv")
ramen <- read_csv("ramen-ratings.csv")
# Check the first few rows
head(ramen)
# Load required packages
library(tidyverse)
# Check column names
names(ramen)
# 2.	Create a bar plot that shows the count of rows for each style.
ggplot(ramen, aes(x = Style)) +
geom_bar(fill = "skyblue") +
ggtitle("Count of Ramen by Style") +
xlab("Style") +
ylab("Count of Rows")
# Box plot showing showing Stars per style
ggplot(ramen, aes(x = Style, y = Stars, fill = Style)) +
geom_boxplot() +
ggtitle("Stars Distribution by Style") +
xlab("Style") +
ylab("Stars") +
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)
)
# Assign Styles with NA as "Misc" so it won't appear like it is a missing value
ramen <- ramen %>%
mutate(Style = ifelse(is.na(Style), "Misc", Style))
# 2.	Create a bar plot that shows the count of rows for each style.
ggplot(ramen, aes(x = Style)) +
geom_bar(fill = "skyblue") +
ggtitle("Count of Ramen by Style") +
xlab("Style") +
ylab("Count of Rows")
# Count rows where Style is "Pack"
pack_count <- ramen %>%
filter(Style == "Pack") %>%
nrow()
# Print result
print(pack_count)
# Count rows for each style
ramen %>%
count(Style)
# Box plot showing showing Stars per style
ggplot(ramen, aes(x = Style, y = Stars, fill = Style)) +
geom_boxplot() +
ggtitle("Stars Distribution by Style") +
xlab("Style") +
ylab("Stars") +
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)
)
# Count rows for each Stars
ramen %>%
count(Stars)
# Count rows for each Stars
ramen %>%
count(Stars)
# Box plot showing showing Stars per style, breaks set to whole numbers
ggplot(ramen, aes(x = Style, y = Stars, fill = Style)) +
geom_boxplot() +
ggtitle("Stars Distribution by Style") +
xlab("Style") +
ylab("Stars") +
scale_y_continuous(breaks = seq(0, 5, by = 1)) +  # This sets breaks at 0, 1, 2, 3, 4, 5
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)
)
# Drop unrated rows so that only the rated ramen are in the box plot
ramen <- ramen %>%
filter(!is.na(Stars))
# Box plot showing showing Stars per style, breaks set to whole numbers
ggplot(ramen, aes(x = Style, y = Stars, fill = Style)) +
geom_boxplot() +
ggtitle("Stars Distribution by Style") +
xlab("Style") +
ylab("Stars") +
scale_y_continuous(breaks = seq(0, 5, by = 1)) +  # This sets breaks at 0, 1, 2, 3, 4, 5
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)
)
# Convert Stars to numeric
ramen <- ramen %>%
mutate(Stars = as.numeric(Stars))
# Box plot showing showing Stars per style, breaks set to whole numbers
ggplot(ramen, aes(x = Style, y = Stars, fill = Style)) +
geom_boxplot() +
ggtitle("Stars Distribution by Style") +
xlab("Style") +
ylab("Stars") +
scale_y_continuous(breaks = seq(0, 5, by = 1)) +  # This sets breaks at 0, 1, 2, 3, 4, 5
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)
)
# Current Directory
getwd()
# Load required packages
library(tidyverse)
#Tasks
# 1.	Read the data from the CSV file into a tibble and display it. To do that,
#     you can use the read_csv() function like this:
#       ramen <- read_csv("ramen-ratings.csv")
ramen <- read_csv("ramen-ratings.csv")
# Check the first few rows
head(ramen)
# Check column names
names(ramen)
# Assign Styles with NA value as "Misc" so it won't appear as missing value
ramen <- ramen %>%
mutate(Style = ifelse(is.na(Style), "Misc", Style))
# Count rows for each style
ramen %>%
count(Style)
# Convert Stars to numeric
ramen <- ramen %>%
mutate(Stars = as.numeric(Stars))
# Count rows for each Stars
ramen %>%
count(Stars)
print(n = 43)
print(ramen, n = Inf)
print(Stars, n = Inf)
# Count rows for each Stars
ramen %>%
count(Stars, n = Inf)
# Count rows for each Stars
ramen %>%
count(Stars, n = 43)
# Current Directory
getwd()
# Load required packages
library(tidyverse)
#Tasks
# 1.	Read the data from the CSV file into a tibble and display it. To do that,
#     you can use the read_csv() function like this:
#       ramen <- read_csv("ramen-ratings.csv")
ramen <- read_csv("ramen-ratings.csv")
# Check the first few rows
head(ramen)
# Check column names
names(ramen)
# Assign Styles with NA value as "Misc" so it won't appear as missing value
ramen <- ramen %>%
mutate(Style = ifelse(is.na(Style), "Misc", Style))
# Count rows for each style
ramen %>%
count(Style)
# Convert Stars to numeric
ramen <- ramen %>%
mutate(Stars = as.numeric(Stars))
# Count rows for each Stars
ramen %>%
count(Stars)
# 2.	Create a bar plot that shows the count of rows for each style.
ggplot(ramen, aes(x = Style)) +
geom_bar(fill = "skyblue") +
ggtitle("Count of Ramen by Style") +
xlab("Style") +
ylab("Count of Rows")
# Drop unrated rows so that only the rated ramen are in the box plot
ramen <- ramen %>%
filter(!is.na(Stars))
# Box plot showing showing Stars per style, breaks set to whole numbers
ggplot(ramen, aes(x = Style, y = Stars, fill = Style)) +
geom_boxplot() +
ggtitle("Stars Distribution by Style") +
xlab("Style") +
ylab("Stars") +
scale_y_continuous(breaks = seq(0, 5, by = 1)) +  # This sets breaks at 0, 1, 2, 3, 4, 5
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5)
)
# 4.	Modify the plot you just created to only use data from the USA.
#     Filter for USA data only
usa_ramen <- filter(ramen, Country == "USA")
# Box plot for USA only
ggplot(usa_ramen, aes(x = Style, y = Stars, color = Style)) +
geom_boxplot() +
ggtitle("Stars Distribution by Style in the USA") +
xlab("Style") +
ylab("Stars")
# Create tibble for selected countries
selected_ramen <- filter(ramen, Country %in% c("Japan", "India", "Taiwan", "USA"))
# Check tibble
print(selected_ramen)
# Box plot, by country (2 plots per row)
ggplot(selected_ramen, aes(x = Style, y = Stars, fill = Style)) +
geom_boxplot() +
facet_wrap(vars(Country), ncol = 2) +
ggtitle("Stars Distribution by Style (Selected Countries)") +
xlab("Style") +
ylab("Stars")
