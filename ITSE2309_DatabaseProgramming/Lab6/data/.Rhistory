list("NewFeb", 29, "extraFeb")
)
#display the data frame rows you just added along with the last row that was added before
calendar_df[12:15,1:3]
#add a column to a data frame first create the vector
avg_temp <- c(52.3, 56.1, 62, 68.9, 75.9, 80.7, 81.9, 82.7, 78.5, 70.7, 61.1, 54.3, 0, 0)
#use the cbind to add the average temperature column to the data frame
calendar_df <- cbind(calendar_df, "Average Temp" = avg_temp)
#display the contents of calendar_df
calendar_df
#what happens when you don't have the same number of values as the existing data
avg_temp  <- c(1, 2, 3, 4)
calendar_df <- cbind(calendar_df, "Average Temp" = avg_temp)
#display the data frame
calendar_df
# what happens when you pass blanks to the column
avg_temp  <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
calendar_df <- cbind(calendar_df, "Average Temp" = avg_temp)
#display the data frame
calendar_df
#remove the extra columns from calendar_df
calendar_df = subset(calendar_df, select = c("Month", "NumDays", "Season"))
#d isplay the data frame
calendar_df
# add back in the average temperature column
avg_temp <- c(52.3, 56.1, 62, 68.9, 75.9, 80.7, 81.9, 82.7, 78.5, 70.7, 61.1, 54.3, 0, 0)
# use the cbind to add the average temperature column to the data frame
calendar_df <- cbind(calendar_df, "Average Temp" = avg_temp)
#display the data frame
calendar_df
#display the structure of the data frame
str(calendar_df)
#check the number of months that have 30 days
num_days == 30
#check the number of months that have days not = to 31
num_days != 31
#check for a literal value
avg_temp > 0
#check for months in winter or months that have 31 days this includes all in winter and also indexes 3 (March), 5 (May), 7 (July), 8 (August), 10 (Oct)
seasons == "winter" | num_days == 31
#check for months in winter and months that have 31 days this omits vector index 2 which is February
seasons == "winter" & num_days == 31
short_month <- "Feb"
# display short_month
short_month
# add an else clause above that isn't true, no value in the num_days vector is shorter than 28 days this means that the else clause will execute
if (num_days[2] <= 27){
short_month <- "Feb"
} else {
short_month <- "Not valid"
}
# display short_month
short_month
# another way to code the above conditions
if (num_days[2]== 28)short_month <- "february" else short_month <- "error number of days is wrong"
# display short_month
short_month
# code that would evaluate to the else condition
if (num_days[2]== 27)short_month <- "february" else short_month <- "error number of days is wrong"
# display short_month
short_month
# an if statement that finds two conditions are true
if (num_days[2]== 28 & num_days [4] == 30) check_month <- "both months ok" else check_month <- "error Feb or Apr days are wrong"
# display check_month
check_month
# an if statement that finds one condition is false
if (num_days[2]== 999 & num_days [4] == 30) check_month <- "both months ok" else check_month <- "error Feb or Apr days are wrong"
# display check_month
check_month
# for loops look through an entire range, or looks for the values within a vector or list
# a for loop that prints a range of values. Nums is a vector by default
for (nums in 1:5) {print(nums)}
# a for loop that checks the values in the vector num_days and totals the days in the year
# first display the vector
num_days
# create a loop that looks through all the values in num_days and adds them to a variable called running_total
# set running_total to zero
running_total <- 0
# loop through the vector num_days and add the element_value to the variable running_total
for(vector_values in num_days)
{running_total <- running_total + vector_values}
# display running_total
running_total
# use a for loop to change the values in the vector months to upper case
for (i in 1:length(months)) {
months[i] <- toupper(months[i])
}
# display the vector
months
# change it back
for (i in 1:length(months)) {
months[i] <- tolower(months[i])
}
# use a for loop to change only some values in a vector. Change only the months that start with J to upper case.
for (i in 1:length(months)) {
if (substr(months[i], 1, 1) == "j") {
months[i] <- toupper(months[i])
}
}
# display the vector
months
# create your own functions
print_greeting <- function() {
print("Greetings Earthling!")
}
# run the function
print_greeting()
# a function that takes in two numbers and adds them together
add_em_up <- function(first_number, second_number){
calculation = first_number + second_number
print(calculation)
}
# run the function
add_em_up(12, 14)
# a function that looks through the months vector and prints the month if the month starts with "m"
check_index <- function() {
for (i in 1:length(months)) {
if (substr(months[i], 1, 1) == "m") {
print(months[i])
}
}
}
# run the function
check_index()
# the same function as check_index but this time takes a letter as a parameter and prints if a month has that letter
check_index2 <- function(letter) {
for (i in 1:length(months)) {
if (substr(months[i], 1, 1) == letter)
{print(months[i])
}
}
}
# test the function
check_index2("m")
# test the function again
check_index2("x")
# run the function
check_index()
reticulate::repl_python()
yes
reticulate::repl_python()
#Create a vector named Ones that contains the numbers from 1 to 5.
Ones <- 1:5
Twos <- seq(2, 10, by=2)
Threes <- seq(3, 15, by=3)
Fours <- seq(4, 20, by=4)
Fives <- seq(5, 25, by=5)
times_table <- data.frame(
CH_One = Ones,
CH_Two = Twos,
CH_Three = Threes,
CH_Four = Fours,
CH_Five = Fives
)
View(times_table)
#Create another vector named Sixes. This vector should contain 5 values
# beginning at 6 and counting by 6.
Sixes <- seq(6, 30, by=6)
# Use the rbind() function to add Sixes to your times_table data frame.
# Make sure you have a name for the new column that follows the naming
# convention in step 6.
new_row <- data.frame(CH_One = NA, CH_Two = NA, CH_Three = NA, CH_Four = NA, CH_Five = NA, CH_Six = Sixes)
times_table <- rbind(times_table, new_row)
# Use the rbind() function to add Sixes to your times_table data frame.
# Make sure you have a name for the new column that follows the naming
# convention in step 6.
new_row <- data.frame(
CH_One = NA,
CH_Two = NA,
CH_Three = NA,
CH_Four = NA,
CH_Five = NA,
CH_Six = Sixes
)
colnames(new_row) <- colnames(times_table)
times_table <- rbind(times_table, new_row)
times_table <- data.frame(
CH_One = Ones,
CH_Two = Twos,
CH_Three = Threes,
CH_Four = Fours,
CH_Five = Fives
)
#Create another vector named Sixes. This vector should contain 5 values
# beginning at 6 and counting by 6.
Sixes <- seq(6, 30, by=6)
# Use the rbind() function to add Sixes to your times_table data frame.
# Make sure you have a name for the new column that follows the naming
# convention in step 6.
rbind(times_table, Sixes)
# Create a vector named Ones that contains the numbers from 1 to 5.
# In this script create a vector named Twos that contains the numbers from
# 2 to 10 counting by 2 like this: Twos <- c(seq(from = 2, to = 10, by = 2))
# Create three more vectors, named Threes, Fours, and Fives.
# Vector Threes should count by threes and include 5 values.
# Vector Fours should count by fours and contain five numbers.
# Vector Fives should count by fives and contain five numbers.
Ones <- 1:5
Twos <- seq(2, 10, by=2)
Threes <- seq(3, 15, by=3)
Fours <- seq(4, 20, by=4)
Fives <- seq(5, 25, by=5)
#Create a data frame named times_table that combines your 5 vectors.
# Include a name for each column using this naming convention replacing
# Initials with your initials.
initials <- "CH"
# Create a vector named Ones that contains the numbers from 1 to 5.
# In this script create a vector named Twos that contains the numbers from
# 2 to 10 counting by 2 like this: Twos <- c(seq(from = 2, to = 10, by = 2))
# Create three more vectors, named Threes, Fours, and Fives.
# Vector Threes should count by threes and include 5 values.
# Vector Fours should count by fours and contain five numbers.
# Vector Fives should count by fives and contain five numbers.
Ones <- 1:5
Twos <- seq(2, 10, by=2)
Threes <- seq(3, 15, by=3)
Fours <- seq(4, 20, by=4)
Fives <- seq(5, 25, by=5)
#Create a data frame named times_table that combines your 5 vectors.
# Include a name for each column using this naming convention replacing
# Initials with your initials.
times_table <- data.frame(
CH_One = Ones,
CH_Two = Twos,
CH_Three = Threes,
CH_Four = Fours,
CH_Five = Fives
)
#Create another vector named Sixes. This vector should contain 5 values
# beginning at 6 and counting by 6.
Sixes <- seq(6, 30, by=6)
# Use the rbind() function to add Sixes to your times_table data frame.
# Make sure you have a name for the new column that follows the naming
# convention in step 6.
rbind(times_table, Sixes)
# Use the cbind() function to add an additional column to your times_table
# data frame using the Sixes vector, making sure to follow the column naming
# convention from step 7 .
CH_Six <- Sixes
times_table <- cbind(times_table, CH_Six)
# Compose 4 separate R commands that look for the following in your
# times_table data frame.
#    One command that looks for row 2 using the data frame index.
row_2 <- times_table[2, ]
print(row_2)
print(times_table)
#    2. One command that looks for rows 2, 3, and  4 using the data frame index.
rows_2thru4 <- times_table[2:4, ]
print(rows_2thru4)
#    3. One command that looks for Initials_Threes by itâ€™s column name.
col_Threes <- times_table$CH_Three
print(col_Threes)
#    4. One command that looks for all rows in the data frame but only the
#     first 3 columns.
subset_3_cols <- times_table[, 1:3]
print(subset_3_cols)
# Create a vector of pirate captain names. You can use any names you like,
# but make sure you have 5 or more names in your vector. The first vector
# value should be your first name.
pirate_captains <- c("Crystal", "Monkey D. Luffy", "Buggy", "Kuro", "Arlong")
#Create a second vector of crew sizes. This vector should contain the number
# of crew members for each captain you named in the previous step. At least
# one value in the CrewSize vector should be bigger than 5.
CrewSize <- c(10, 13, 26, 5, 12)
# Create a data frame named ships where the first column stores the captainâ€™s
# name, and the second column stores the crew sizes. Give the first column the
# name of Captain and the second column the name of CrewSize.
ships <- data.frame(Captain = pirate_captains, CrewSize = CrewSize)
print(ships)
# Use the single bracket selector to select the column named CrewSize, (pos 2).
print(ships[ ,2])
print(ships$CrewSize)
# Use the $ selector to select the vector for the column named Captain
print(ships$Captain)
# Use the rbind() function to add a row for another captain and crew size, when
# you do use a list, not a vector to store the data for the row.
ships <- rbind(ships, data.frame(Captain="Shanks", CrewSize=18))
print(ships)
for (size in ships$CrewSize) {
print(size)
}
# Create a vector that is called yourlastname, substituting your last name.
# The vector should have 5 text values in it. It can be anything you like:
# sports teams, dog breeds, types of tea, etc.
hollis <- c("Devil Fruit", "Grand Line", "Haki", "One Piece", "Yonko")
# Print the value in the 4th position of vector, using single bracket selector.
print(hollis[4])
if (item == hollis[3]) {
print(item)
} else {
print("not the third value")
}
# Code a For Loop with an IF statement that prints the third value.
for (item in hollis) {
if (item == hollis[3]) {
print(item)
} else {
print("not the third value")
}
}
welcome_message <- function(parameter) {
print(paste("Hello, welcome", parameter, "to our ship!"))
}
welcome_message("Zoro")
subtract_and_multiply <- function(num1, num2) {
firstvariable <- num2 - num1
secondvariable <- num1 * num2
print(paste(num2, "subtracted from", num1, "is", firstvariable))
print(paste(num1, "multiplied by", num2, "is", secondvariable))
}
subtract_and_multiply(5, 10)
# Name: Crystal Hollis | Favorite Holiday: Halloween
# Class: ITSE 2300.82700 Database Programming
# Lab 6 Cleaning and Retrieving Data
# ======================================================
# Dataset Files:
# ramen-ratings.csv, in ~/data/ramen-ratings.csv
# avocado.csv, in ~/data/avocado.csv
# ======================================================
# Confirming Directory:
# Current Directory
getwd()
# Set Directory:
# Copy and paste filepath
setwd("/Users/magnamediaartsllc/GitHub/DallasCollege_Portfolio/ITSE2309_DatabaseProgramming/Lab5/data")
# Verify Current Directory
getwd()
# ======================================================
# Lab 6 Instructions
# Legend: [âœ”] indicates task completed
# In this lab you will clean two data files. To get started:
# 1. Insert a comment with your name and your favorite holiday. [âœ”]
# 2. You will need to load the library "tidyverse" in order to complete this. [âœ”]
library(tidyverse)
# 1. Insert a comment with your name and your favorite holiday. [âœ”]
# 2. You will need to load the library "tidyverse" in order to complete this. [âœ”]
library(tidyverse)
# 3. You should also make sure that avocados.csv and ramen.csv are both in your working directories.
# Confirming Directory:
# Current Directory
getwd()
# ======================================================
# Clean the Ramen Data using the attached file ramen-ratings.csv
# 1.	Read the data from the CSV file into a tibble and display it.
ramen <- read_csv("ramen-ratings.csv")
view(ramen)
# 2.	Rename the Stars column to Rating.
ramen <- ramen %>% rename(Rating = Stars)
# 3.	Convert the Style column to the factor type.
ramen$Style <- as.factor(ramen$Style)
# 4.	Drop the Country column.
ramen <- ramen %>% select(-Country)
# 5.	Rename the Brand column to Company and the Variety column to Product.
ramen <- ramen %>% rename(Company = Brand, Product = Variety)
# 6.	Display the tibble to make sure your code worked correctly.
#     Also, make a note of the number of rows in the tibble.
print(ramen)
original_row_count <- nrow(ramen)
cat("Original row count:", original_row_count, "\n")
# 7. Use the duplicated() and filter() functions to display all duplicate rows.
duplicates <- ramen %>% filter(duplicated(.))
print(duplicates)
# 7. Use the duplicated() and filter() functions to display all duplicate rows.
duplicates <- ramen %>% filter(duplicated(.))
print(duplicates)
# 1. Insert a comment with your name and your favorite holiday. [âœ”]
# 2. You will need to load the library "tidyverse" in order to complete this. [âœ”]
library(tidyverse)
# 3. You should also make sure that avocados.csv and ramen.csv are both in your
#    working directories. [âœ”]
# Confirming Directory:
# Current Directory
getwd()
# =============================================================================
# Clean the Ramen Data using the attached file ramen-ratings.csv
# 1.	Read the data from the CSV file into a tibble and display it. [âœ”]
ramen <- read_csv("ramen-ratings.csv")
# 2.	Rename the Stars column to Rating. [âœ”]
ramen <- ramen %>% rename(Rating = Stars)
# 3.	Convert the Style column to the factor type. [âœ”]
ramen$Style <- as.factor(ramen$Style)
# 4.	Drop the Country column. [âœ”]
ramen <- ramen %>% select(-Country)
# 2.	Rename the Stars column to Rating. [âœ”]
ramen <- ramen %>% rename(Rating = Stars)
# =============================================================================
# Clean the Ramen Data using the attached file ramen-ratings.csv
# 1.	Read the data from the CSV file into a tibble and display it. [âœ”]
ramen <- read_csv("ramen-ratings.csv")
# 2.	Rename the Stars column to Rating. [âœ”]
ramen <- ramen %>% rename(Rating = Stars)
# 3.	Convert the Style column to the factor type. [âœ”]
ramen$Style <- as.factor(ramen$Style)
# 4.	Drop the Country column. [âœ”]
ramen <- ramen %>% select(-Country)
# 5.	Rename the Brand column to Company and the Variety column to Product. [âœ”]
ramen <- ramen %>% rename(Company = Brand, Product = Variety)
# 6.	Display the tibble to make sure your code worked correctly. [âœ”]
#     Also, make a note of the number of rows in the tibble. [âœ”]
print(ramen)                                     # A tibble: 2,580 Ã— 6
original_row_count <- nrow(ramen)
# Environmental Window: Values, original_row_count, 2580L
cat("Original row count:", original_row_count, "\n") # Original row count: 2580
# 7. Use the duplicated() and filter() functions to display all duplicate rows.
duplicates <- ramen %>% filter(duplicated(.))
# Environment Window: 0 obs. of 6 variables
print(duplicates)
# 8. Drop all duplicate rows. Then, display the tibble to get a count of the
#    number of rows, and compare that with the original number of rows to
#    see how many were dropped.
ramen <- ramen %>% distinct()
# Nothing changed because there's no duplicate rows
new_row_count <- nrow(ramen)
cat("New row count:", new_row_count, "\n")
# Output: New row count: 2580
# No change because there's no duplicate rows
cat("Rows dropped:", original_row_count - new_row_count, "\n")
# 9.	Display all rows that have missing values.
missing <- ramen %>% filter(if_any(everything(), is.na))
# Environment Window: created missing. 2539 obs. of 6 variables
print(missing)
# 10.	Drop any rows that have missing values.
ramen <- ramen %>% drop_na()
# 11.	Display the tibble to make sure your code worked correctly.
print(ramen)
# =============================================================================
# Clean the Avocado Data using the attached avocado.csv file
# 1.	Read the data from the CSV file into a tibble and display the first five rows.
avocado <- read_csv("avocado.csv")
# 1. Insert a comment with your name and your favorite holiday. [âœ”]
# 2. You will need to load the library "tidyverse" in order to complete this. [âœ”]
library(tidyverse)
# 3. You should also make sure that avocados.csv and ramen.csv are both in your
#    working directories. [âœ”]
# Confirming Directory:
# Current Directory
getwd()
# Set Directory:
# Copy and paste filepath
setwd("/Users/magnamediaartsllc/GitHub/DallasCollege_Portfolio/ITSE2309_DatabaseProgramming/Lab6/data")
# Verify Current Directory
getwd()
# =============================================================================
# Clean the Ramen Data using the attached file ramen-ratings.csv
# 1.	Read the data from the CSV file into a tibble and display it. [âœ”]
ramen <- read_csv("ramen-ratings.csv")
view(ramen)
# 2.	Rename the Stars column to Rating. [âœ”]
ramen <- ramen %>% rename(Rating = Stars)
# 3.	Convert the Style column to the factor type. [âœ”]
ramen$Style <- as.factor(ramen$Style)
# 4.	Drop the Country column. [âœ”]
ramen <- ramen %>% select(-Country)
# 5.	Rename the Brand column to Company and the Variety column to Product. [âœ”]
ramen <- ramen %>% rename(Company = Brand, Product = Variety)
# 6.	Display the tibble to make sure your code worked correctly. [âœ”]
#     Also, make a note of the number of rows in the tibble. [âœ”]
print(ramen)
# Outputs: A tibble: 2, 577 Ã— 6
original_row_count <- nrow(ramen)
# Environmental Window: Values > original_row_count | 2577L
cat("Original row count:", original_row_count, "\n")
# 7. Use the duplicated() and filter() functions to display all duplicate rows.
duplicates <- ramen %>% filter(duplicated(.))
# Environment Window: 6 obs. of 4 variables
print(duplicates)
# 8. Drop all duplicate rows. Then, display the tibble to get a count of the
#    number of rows, and compare that with the original number of rows to
#    see how many were dropped.
ramen <- ramen %>% distinct()
# Environmental Window: ramen | 2571 obs. o 4 variables
new_row_count <- nrow(ramen)
# Environmental Window: Values > new_row_count | 2571L
cat("New row count:", new_row_count, "\n")
# Output: New row count: 2571
cat("Rows dropped:", original_row_count - new_row_count, "\n")
# 9.	Display all rows that have missing values.
missing <- ramen %>% filter(if_any(everything(), is.na))
# Environment Window: created missing. 2 obs. of 4 variables
print(missing)
# 10.	Drop any rows that have missing values.
ramen <- ramen %>% drop_na()
# 11.	Display the tibble to make sure your code worked correctly.
print(ramen)
# =============================================================================
# Clean the Avocado Data using the attached avocado.csv file
# 1.	Read the data from the CSV file into a tibble and display the first five rows.
avocado <- read_csv("avocado.csv")
print(head(avocado, 5))
# 2.Use the str() function to view column names and data types for the table.
str(avocado)
# 3.	Display the value counts for the region column
#     note that one of the regions is TotalUS.
avocado %>% count(region)
print(n = TotalUS)
print(n = 45)
# 4.	Drop the rows that have a region of TotalUS.
avocado <- avocado %>% filter(region != "TotalUS")
# 5.	Check to see if any of the rows have missing values.
avocado %>% filter(if_any(everything(), is.na))
# 6.	Rename the type, year, and region columns to Type, Year, and Region.
avocado <- avocado %>% rename(Type = type, Year = year, Region = region)
# 7.	Convert the Date column to the Date type and the Type column to the
#     factor type.
avocado$Date <- as.Date(avocado$Date)
avocado$Type <- as.factor(avocado$Type)
# 7.	Convert the Date column to the Date type and the Type column to the
#     factor type.
avocado$Date <- as.Date(avocado$Date, format = "%m/%d/%Y")
view(avocado)
# 8.	Display the tibble to make sure your code worked correctly.
print(avocado)
