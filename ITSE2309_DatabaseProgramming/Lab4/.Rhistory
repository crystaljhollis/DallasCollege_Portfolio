# all of the numbers of weekdays except for 1 and 3
daynums_of_week[c(-1, -3)]
# monday, wed, fri of a week
daynames_of_week[c(2, 4, 6)]
#create a vector that stores temeratures
temperatures <- c(99.8, 97.2, 77.4, 101.3)
# display the vector
temperatures
# display the number of values or length of a vector
length(temperatures)
# display the data type of a vector
typeof(temperatures)
# display a vector value by its index
daynames_of_week[1]
# display vector values but exclude one of them using an index
daynames_of_week[-1]
# diplay vector values but exclued more than one value using an index
daynames_of_week[-1][-6]
# create a named vector
temps_w_names <- c("M"= 99.8, "T" = 97.2, "W"= 77.4, "R"= 101.3)
# display the vector
temps_w_names
# get the names of the values in a named vector
names(temps_w_names)
# change one of the names in a named vector, in this case change R to Th
names(temps_w_names) <- c("M", "Tu", "W", "Th")
# display the vector again
temps_w_names
# reference a vector value by index
temps_w_names[3]
# reference a vector value by its name
temps_w_names["W"]
# build a data frame
# create a vector of month names
months <- c("jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec")
# create a vector to store the length of each month
num_days <- c(31, 28, 31, 30, 31, 30,31, 31, 30, 31, 30, 31)
# create a vector to store the season for each month
seasons <- c("winter", "winter", "spring", "spring", "spring", "summer", "summer", "summer", "fall", "fall", "fall", "winter")
#define a dataframe composed of the three vectors
calendar_df <- data.frame(Month = months, NumDays = num_days, Season = seasons)
# display the data frame calendar_df
calendar_df
# display the contents of the column "Month", which is the vecotor named "months" within the data frame, won't work if the column name contains spaces
calendar_df$Month
#display the contents of "Month", which is the vecotor named "months" within the data frame, will work on any column name
calendar_df[["Month"]]
#display the contens of the 1st column in the dataframe, regardless of the name of the column
calendar_df[[1]]
# display the contents of the 1st column along with the column's name
calendar_df[1]
# display the contents and the name of the data frame column called "Month" irrespective of the columns position or index
calendar_df["Month"]
# display all columns for the first row of a dataframe
calendar_df[1,]
# display the 2nd, 3rd, and 4th rows of the data frame, but not all columns, only the first and second columns
calendar_df[2:4, 1:2]
# display the only the first (month) and 3rd (season) of the data in row 4 of the data frame but omit the second column (the number of days in April)
calendar_df[4,-2]
# display all rows of the dataframe but only display the 1st and 3rd columns, omitting the second column
calendar_df[,-2]
# change the value of data using an index. In this case change row 2 (feb) column 2 (28) from 28 to 29
calendar_df[2,2] <- 29
#display the data frame
calendar_df
# change the value of season in rows 9 through 11 from "Fall" to "Autumn"
calendar_df[9:11, "Season"] <- "Autumn"
#display the data frame
calendar_df
# create a list of lists, which will work like a data frame, in that it will store names of months, days in each month, and the season of the month
calendar_list <- list(
"Misc Calendar Data",
headers= c("month", "numDays", "season"),
rows= list(
list("Jan", 31, "Winter"),
list("Feb", 28, "Winter"),
list("Mar", 31, "Spring"),
list("Apr", 30, "Spring"),
list("May", 31, "Spring"),
list("Jun", 30, "Summer"),
list("Jul", 31, "Summer"),
list("Aug", 31, "Summer"),
list("Sep", 30, "Fall"),
list("Oct", 31, "Fall"),
list("Nov", 30, "Fall"),
list("Dec", 31, "Winter")
))
# display the structure of the list
str(calendar_list)
# display the second row of the list - which is the headers
calendar_list[2]
# display the second row of the list - but only display the values not the name of the vector that contains the headers
calendar_list[[2]]
# display what's in the vector named headers by referencing it's name
calendar_list[["headers"]]
# display the seventh row of the list named "rows"
calendar_list[["rows"]][7]
# display the first row (the vector object named "headers")
calendar_list[["rows"]][1]
# display only the second column of the first row of the list named "rows"
calendar_list[["rows"]][[1]][[2]]
# display the sixth row of the list named "rows"
calendar_list[["rows"]][[6]]
# create  a vector
example_numbers <- c(1,2,3,4)
# display the vector
example_numbers
# add a value to a vector add the number 5 to the values
example_numbers <- append(example_numbers, 5)
# display the values with 5 added
example_numbers
# add more numbers to the vector
example_numbers <- append(example_numbers, c(6, 8, 9))
# display again
example_numbers
#insert a value in the middle of a vector
example_numbers <- append(example_numbers, 7, after = 6)
# display again
example_numbers
# create a list
example_letters <- list("a", "b", "C")
# display the list
example_letters
# add values to the list at the end
example_letters <- append(example_letters, "d")
# display the list
example_letters
# append some more values to the letters list using a vector
example_letters <- append(example_letters, c("e", "h"))
# display the list
example_letters
#insert f and g into the middle of the list
example_letters <- append(example_letters, list("f", "g"), after = 5)
# display the list
example_letters
#add a row to the calendar_df data frame
calendar_df <- rbind(calendar_df,
list("NewJan", 31, "extraJan"),
list("NewFeb", 29, "extraFeb")
)
#display the data frame rows you just added along with the last row that was added before
calendar_df[12:15,1:3]
#add a column to a data frame first create the vector
avg_temp <- c(52.3, 56.1, 62, 68.9, 75.9, 80.7, 81.9, 82.7, 78.5, 70.7, 61.1, 54.3, 0, 0)
#use the cbind to add the average temperature column to the data frame
calendar_df <- cbind(calendar_df, "Average Temp" = avg_temp)
#display the contents of calendar_df
calendar_df
#what happens when you don't have the same number of values as the existing data
avg_temp  <- c(1, 2, 3, 4)
calendar_df <- cbind(calendar_df, "Average Temp" = avg_temp)
#display the data frame
calendar_df
# what happens when you pass blanks to the column
avg_temp  <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
calendar_df <- cbind(calendar_df, "Average Temp" = avg_temp)
#display the data frame
calendar_df
#remove the extra columns from calendar_df
calendar_df = subset(calendar_df, select = c("Month", "NumDays", "Season"))
#d isplay the data frame
calendar_df
# add back in the average temperature column
avg_temp <- c(52.3, 56.1, 62, 68.9, 75.9, 80.7, 81.9, 82.7, 78.5, 70.7, 61.1, 54.3, 0, 0)
# use the cbind to add the average temperature column to the data frame
calendar_df <- cbind(calendar_df, "Average Temp" = avg_temp)
#display the data frame
calendar_df
#display the structure of the data frame
str(calendar_df)
#check the number of months that have 30 days
num_days == 30
#check the number of months that have days not = to 31
num_days != 31
#check for a literal value
avg_temp > 0
#check for months in winter or months that have 31 days this includes all in winter and also indexes 3 (March), 5 (May), 7 (July), 8 (August), 10 (Oct)
seasons == "winter" | num_days == 31
#check for months in winter and months that have 31 days this omits vector index 2 which is February
seasons == "winter" & num_days == 31
short_month <- "Feb"
# display short_month
short_month
# add an else clause above that isn't true, no value in the num_days vector is shorter than 28 days this means that the else clause will execute
if (num_days[2] <= 27){
short_month <- "Feb"
} else {
short_month <- "Not valid"
}
# display short_month
short_month
# another way to code the above conditions
if (num_days[2]== 28)short_month <- "february" else short_month <- "error number of days is wrong"
# display short_month
short_month
# code that would evaluate to the else condition
if (num_days[2]== 27)short_month <- "february" else short_month <- "error number of days is wrong"
# display short_month
short_month
# an if statement that finds two conditions are true
if (num_days[2]== 28 & num_days [4] == 30) check_month <- "both months ok" else check_month <- "error Feb or Apr days are wrong"
# display check_month
check_month
# an if statement that finds one condition is false
if (num_days[2]== 999 & num_days [4] == 30) check_month <- "both months ok" else check_month <- "error Feb or Apr days are wrong"
# display check_month
check_month
# for loops look through an entire range, or looks for the values within a vector or list
# a for loop that prints a range of values. Nums is a vector by default
for (nums in 1:5) {print(nums)}
# a for loop that checks the values in the vector num_days and totals the days in the year
# first display the vector
num_days
# create a loop that looks through all the values in num_days and adds them to a variable called running_total
# set running_total to zero
running_total <- 0
# loop through the vector num_days and add the element_value to the variable running_total
for(vector_values in num_days)
{running_total <- running_total + vector_values}
# display running_total
running_total
# use a for loop to change the values in the vector months to upper case
for (i in 1:length(months)) {
months[i] <- toupper(months[i])
}
# display the vector
months
# change it back
for (i in 1:length(months)) {
months[i] <- tolower(months[i])
}
# use a for loop to change only some values in a vector. Change only the months that start with J to upper case.
for (i in 1:length(months)) {
if (substr(months[i], 1, 1) == "j") {
months[i] <- toupper(months[i])
}
}
# display the vector
months
# create your own functions
print_greeting <- function() {
print("Greetings Earthling!")
}
# run the function
print_greeting()
# a function that takes in two numbers and adds them together
add_em_up <- function(first_number, second_number){
calculation = first_number + second_number
print(calculation)
}
# run the function
add_em_up(12, 14)
# a function that looks through the months vector and prints the month if the month starts with "m"
check_index <- function() {
for (i in 1:length(months)) {
if (substr(months[i], 1, 1) == "m") {
print(months[i])
}
}
}
# run the function
check_index()
# the same function as check_index but this time takes a letter as a parameter and prints if a month has that letter
check_index2 <- function(letter) {
for (i in 1:length(months)) {
if (substr(months[i], 1, 1) == letter)
{print(months[i])
}
}
}
# test the function
check_index2("m")
# test the function again
check_index2("x")
# run the function
check_index()
reticulate::repl_python()
yes
reticulate::repl_python()
#Create a vector named Ones that contains the numbers from 1 to 5.
Ones <- 1:5
Twos <- seq(2, 10, by=2)
Threes <- seq(3, 15, by=3)
Fours <- seq(4, 20, by=4)
Fives <- seq(5, 25, by=5)
times_table <- data.frame(
CH_One = Ones,
CH_Two = Twos,
CH_Three = Threes,
CH_Four = Fours,
CH_Five = Fives
)
View(times_table)
#Create another vector named Sixes. This vector should contain 5 values
# beginning at 6 and counting by 6.
Sixes <- seq(6, 30, by=6)
# Use the rbind() function to add Sixes to your times_table data frame.
# Make sure you have a name for the new column that follows the naming
# convention in step 6.
new_row <- data.frame(CH_One = NA, CH_Two = NA, CH_Three = NA, CH_Four = NA, CH_Five = NA, CH_Six = Sixes)
times_table <- rbind(times_table, new_row)
# Use the rbind() function to add Sixes to your times_table data frame.
# Make sure you have a name for the new column that follows the naming
# convention in step 6.
new_row <- data.frame(
CH_One = NA,
CH_Two = NA,
CH_Three = NA,
CH_Four = NA,
CH_Five = NA,
CH_Six = Sixes
)
colnames(new_row) <- colnames(times_table)
times_table <- rbind(times_table, new_row)
times_table <- data.frame(
CH_One = Ones,
CH_Two = Twos,
CH_Three = Threes,
CH_Four = Fours,
CH_Five = Fives
)
#Create another vector named Sixes. This vector should contain 5 values
# beginning at 6 and counting by 6.
Sixes <- seq(6, 30, by=6)
# Use the rbind() function to add Sixes to your times_table data frame.
# Make sure you have a name for the new column that follows the naming
# convention in step 6.
rbind(times_table, Sixes)
# Create a vector named Ones that contains the numbers from 1 to 5.
# In this script create a vector named Twos that contains the numbers from
# 2 to 10 counting by 2 like this: Twos <- c(seq(from = 2, to = 10, by = 2))
# Create three more vectors, named Threes, Fours, and Fives.
# Vector Threes should count by threes and include 5 values.
# Vector Fours should count by fours and contain five numbers.
# Vector Fives should count by fives and contain five numbers.
Ones <- 1:5
Twos <- seq(2, 10, by=2)
Threes <- seq(3, 15, by=3)
Fours <- seq(4, 20, by=4)
Fives <- seq(5, 25, by=5)
#Create a data frame named times_table that combines your 5 vectors.
# Include a name for each column using this naming convention replacing
# Initials with your initials.
initials <- "CH"
# Create a vector named Ones that contains the numbers from 1 to 5.
# In this script create a vector named Twos that contains the numbers from
# 2 to 10 counting by 2 like this: Twos <- c(seq(from = 2, to = 10, by = 2))
# Create three more vectors, named Threes, Fours, and Fives.
# Vector Threes should count by threes and include 5 values.
# Vector Fours should count by fours and contain five numbers.
# Vector Fives should count by fives and contain five numbers.
Ones <- 1:5
Twos <- seq(2, 10, by=2)
Threes <- seq(3, 15, by=3)
Fours <- seq(4, 20, by=4)
Fives <- seq(5, 25, by=5)
#Create a data frame named times_table that combines your 5 vectors.
# Include a name for each column using this naming convention replacing
# Initials with your initials.
times_table <- data.frame(
CH_One = Ones,
CH_Two = Twos,
CH_Three = Threes,
CH_Four = Fours,
CH_Five = Fives
)
#Create another vector named Sixes. This vector should contain 5 values
# beginning at 6 and counting by 6.
Sixes <- seq(6, 30, by=6)
# Use the rbind() function to add Sixes to your times_table data frame.
# Make sure you have a name for the new column that follows the naming
# convention in step 6.
rbind(times_table, Sixes)
# Use the cbind() function to add an additional column to your times_table
# data frame using the Sixes vector, making sure to follow the column naming
# convention from step 7 .
CH_Six <- Sixes
times_table <- cbind(times_table, CH_Six)
# Compose 4 separate R commands that look for the following in your
# times_table data frame.
#    One command that looks for row 2 using the data frame index.
row_2 <- times_table[2, ]
print(row_2)
print(times_table)
#    2. One command that looks for rows 2, 3, and  4 using the data frame index.
rows_2thru4 <- times_table[2:4, ]
print(rows_2thru4)
#    3. One command that looks for Initials_Threes by it’s column name.
col_Threes <- times_table$CH_Three
print(col_Threes)
#    4. One command that looks for all rows in the data frame but only the
#     first 3 columns.
subset_3_cols <- times_table[, 1:3]
print(subset_3_cols)
# Create a vector of pirate captain names. You can use any names you like,
# but make sure you have 5 or more names in your vector. The first vector
# value should be your first name.
pirate_captains <- c("Crystal", "Monkey D. Luffy", "Buggy", "Kuro", "Arlong")
#Create a second vector of crew sizes. This vector should contain the number
# of crew members for each captain you named in the previous step. At least
# one value in the CrewSize vector should be bigger than 5.
CrewSize <- c(10, 13, 26, 5, 12)
# Create a data frame named ships where the first column stores the captain’s
# name, and the second column stores the crew sizes. Give the first column the
# name of Captain and the second column the name of CrewSize.
ships <- data.frame(Captain = pirate_captains, CrewSize = CrewSize)
print(ships)
# Use the single bracket selector to select the column named CrewSize, (pos 2).
print(ships[ ,2])
print(ships$CrewSize)
# Use the $ selector to select the vector for the column named Captain
print(ships$Captain)
# Use the rbind() function to add a row for another captain and crew size, when
# you do use a list, not a vector to store the data for the row.
ships <- rbind(ships, data.frame(Captain="Shanks", CrewSize=18))
print(ships)
for (size in ships$CrewSize) {
print(size)
}
# Create a vector that is called yourlastname, substituting your last name.
# The vector should have 5 text values in it. It can be anything you like:
# sports teams, dog breeds, types of tea, etc.
hollis <- c("Devil Fruit", "Grand Line", "Haki", "One Piece", "Yonko")
# Print the value in the 4th position of vector, using single bracket selector.
print(hollis[4])
if (item == hollis[3]) {
print(item)
} else {
print("not the third value")
}
# Code a For Loop with an IF statement that prints the third value.
for (item in hollis) {
if (item == hollis[3]) {
print(item)
} else {
print("not the third value")
}
}
welcome_message <- function(parameter) {
print(paste("Hello, welcome", parameter, "to our ship!"))
}
welcome_message("Zoro")
subtract_and_multiply <- function(num1, num2) {
firstvariable <- num2 - num1
secondvariable <- num1 * num2
print(paste(num2, "subtracted from", num1, "is", firstvariable))
print(paste(num1, "multiplied by", num2, "is", secondvariable))
}
subtract_and_multiply(5, 10)
source("~/Library/CloudStorage/OneDrive-MagnaMediaArtsLLC/Grad School DSAI/ITSE 2309 Database Programming/Labs/Lab4/install_packages.R", echo=TRUE)
install.packages()
library(tidyverse)
# Reading the CSV file
avocados <- read_csv("avocado.csv")
# Current Directory
getwd()
# Current Directory
getwd()
# Set Directory
# Copy and paste filepath where avocado.csv is located
setwd("/Users/magnamediaartsllc/GitHub/DallasCollege_Portfolio/ITSE2309_DatabaseProgramming/Lab4")
# Verify Current Directory
getwd()
library(tidyverse)
# Reading the CSV file
avocados <- read_csv("avocado.csv")
# Displaying the tibble
print(avocados)
# 3.	Summarize all columns with the summary() function.
summary(avocados)
# 4.	Display the first four columns of data with the select() function.
select(avocados, 1:4)
# 5.	Summarize the AveragePrice and TotalVolume columns.
summary(select(avocados, AveragePrice, TotalVolume))
# 6.	Display the first three columns of the last five rows of the data set.
tail(select(avocados, 1:3), 5)
# 7.	Add a new column named EstimatedRevenue that stores the result of
#     multiplying the TotalVolume and AveragePrice columns. Then, display the
#     data for these columns to confirm that the column was added and has the
#     correct values.
avocados <- avocados %>%
mutate(EstimatedRevenue = TotalVolume * AveragePrice)
# Check if the column was added correctly
select(avocados, TotalVolume, AveragePrice, EstimatedRevenue)
# 8.	Create a tibble named avocados_by_region that’s grouped by region and
#     type and has a third column that includes the average price for each
#     group. Then, display the tibble to view its data.
avocados_by_region <- avocados %>%
group_by(region, type) %>%
summarize(AveragePrice = mean(AveragePrice, na.rm = TRUE))
# Display the grouped tibble
print(avocados_by_region)
# QUESTIONS
# 1.	How many unique regions are there?
length(unique(avocados$region)) # Count unique regions
# 2.	What is the average price for each type of avocado (organic and
#     conventional)? Be sure to include just the type and AveragePrice columns
#     in the results.
avocados %>%
group_by(type) %>%
summarize(AveragePrice = mean(AveragePrice, na.rm = TRUE))
# 3.	Which region has the lowest average price for organic avocados?
#     (Create a tibble that has the correct data. Then, use RStudio to view the
#     tibble and sort by the AveragePrice and type columns.)
avocados %>%
filter(type == "organic") %>%
group_by(region) %>%
summarize(AveragePrice = mean(AveragePrice, na.rm = TRUE)) %>%
arrange(AveragePrice) # Sort to find the lowest price
message("Current Directory: ", getwd()) # Verify
# Current Directory
getwd()
