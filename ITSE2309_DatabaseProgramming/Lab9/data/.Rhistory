CH_Three = Threes,
CH_Four = Fours,
CH_Five = Fives
)
#Create another vector named Sixes. This vector should contain 5 values
# beginning at 6 and counting by 6.
Sixes <- seq(6, 30, by=6)
# Use the rbind() function to add Sixes to your times_table data frame.
# Make sure you have a name for the new column that follows the naming
# convention in step 6.
rbind(times_table, Sixes)
# Create a vector named Ones that contains the numbers from 1 to 5.
# In this script create a vector named Twos that contains the numbers from
# 2 to 10 counting by 2 like this: Twos <- c(seq(from = 2, to = 10, by = 2))
# Create three more vectors, named Threes, Fours, and Fives.
# Vector Threes should count by threes and include 5 values.
# Vector Fours should count by fours and contain five numbers.
# Vector Fives should count by fives and contain five numbers.
Ones <- 1:5
Twos <- seq(2, 10, by=2)
Threes <- seq(3, 15, by=3)
Fours <- seq(4, 20, by=4)
Fives <- seq(5, 25, by=5)
#Create a data frame named times_table that combines your 5 vectors.
# Include a name for each column using this naming convention replacing
# Initials with your initials.
initials <- "CH"
# Create a vector named Ones that contains the numbers from 1 to 5.
# In this script create a vector named Twos that contains the numbers from
# 2 to 10 counting by 2 like this: Twos <- c(seq(from = 2, to = 10, by = 2))
# Create three more vectors, named Threes, Fours, and Fives.
# Vector Threes should count by threes and include 5 values.
# Vector Fours should count by fours and contain five numbers.
# Vector Fives should count by fives and contain five numbers.
Ones <- 1:5
Twos <- seq(2, 10, by=2)
Threes <- seq(3, 15, by=3)
Fours <- seq(4, 20, by=4)
Fives <- seq(5, 25, by=5)
#Create a data frame named times_table that combines your 5 vectors.
# Include a name for each column using this naming convention replacing
# Initials with your initials.
times_table <- data.frame(
CH_One = Ones,
CH_Two = Twos,
CH_Three = Threes,
CH_Four = Fours,
CH_Five = Fives
)
#Create another vector named Sixes. This vector should contain 5 values
# beginning at 6 and counting by 6.
Sixes <- seq(6, 30, by=6)
# Use the rbind() function to add Sixes to your times_table data frame.
# Make sure you have a name for the new column that follows the naming
# convention in step 6.
rbind(times_table, Sixes)
# Use the cbind() function to add an additional column to your times_table
# data frame using the Sixes vector, making sure to follow the column naming
# convention from step 7 .
CH_Six <- Sixes
times_table <- cbind(times_table, CH_Six)
# Compose 4 separate R commands that look for the following in your
# times_table data frame.
#    One command that looks for row 2 using the data frame index.
row_2 <- times_table[2, ]
print(row_2)
print(times_table)
#    2. One command that looks for rows 2, 3, and  4 using the data frame index.
rows_2thru4 <- times_table[2:4, ]
print(rows_2thru4)
#    3. One command that looks for Initials_Threes by it’s column name.
col_Threes <- times_table$CH_Three
print(col_Threes)
#    4. One command that looks for all rows in the data frame but only the
#     first 3 columns.
subset_3_cols <- times_table[, 1:3]
print(subset_3_cols)
# Create a vector of pirate captain names. You can use any names you like,
# but make sure you have 5 or more names in your vector. The first vector
# value should be your first name.
pirate_captains <- c("Crystal", "Monkey D. Luffy", "Buggy", "Kuro", "Arlong")
#Create a second vector of crew sizes. This vector should contain the number
# of crew members for each captain you named in the previous step. At least
# one value in the CrewSize vector should be bigger than 5.
CrewSize <- c(10, 13, 26, 5, 12)
# Create a data frame named ships where the first column stores the captain’s
# name, and the second column stores the crew sizes. Give the first column the
# name of Captain and the second column the name of CrewSize.
ships <- data.frame(Captain = pirate_captains, CrewSize = CrewSize)
print(ships)
# Use the single bracket selector to select the column named CrewSize, (pos 2).
print(ships[ ,2])
print(ships$CrewSize)
# Use the $ selector to select the vector for the column named Captain
print(ships$Captain)
# Use the rbind() function to add a row for another captain and crew size, when
# you do use a list, not a vector to store the data for the row.
ships <- rbind(ships, data.frame(Captain="Shanks", CrewSize=18))
print(ships)
for (size in ships$CrewSize) {
print(size)
}
# Create a vector that is called yourlastname, substituting your last name.
# The vector should have 5 text values in it. It can be anything you like:
# sports teams, dog breeds, types of tea, etc.
hollis <- c("Devil Fruit", "Grand Line", "Haki", "One Piece", "Yonko")
# Print the value in the 4th position of vector, using single bracket selector.
print(hollis[4])
if (item == hollis[3]) {
print(item)
} else {
print("not the third value")
}
# Code a For Loop with an IF statement that prints the third value.
for (item in hollis) {
if (item == hollis[3]) {
print(item)
} else {
print("not the third value")
}
}
welcome_message <- function(parameter) {
print(paste("Hello, welcome", parameter, "to our ship!"))
}
welcome_message("Zoro")
subtract_and_multiply <- function(num1, num2) {
firstvariable <- num2 - num1
secondvariable <- num1 * num2
print(paste(num2, "subtracted from", num1, "is", firstvariable))
print(paste(num1, "multiplied by", num2, "is", secondvariable))
}
subtract_and_multiply(5, 10)
# also importing tidyverse and setting workspace
library(tidyverse)
# Confirming Directory:
# Current Directory
getwd()
# Set Directory:
# Copy and paste filepath
setwd("/Users/magnamediaartsllc/GitHub/DallasCollege_Portfolio/ITSE2309_DatabaseProgramming/Lab8/data")
# Verify Current Directory
getwd() #should be ~/Lab8/data
ramen-ratings <- read_csv("ramen-ratings.csv")
ramen <- read_csv("ramen-ratings.csv")
ramen
ramen_stats
# also importing tidyverse and setting workspace
library(tidyverse)
# Confirming Directory:
# Current Directory
getwd()
ramen <- read_csv("ramen-ratings.csv")
print(ramen)
# =============================================================================
# 2.	Create a tibble named ramen_stats that groups the data by style and
#     calculates the mean stars and standard deviation for each style.
ramen_stats <- ramen %>%
group_by(style) %>%
summarize(
MeanStars = mean(stars, na.rm = TRUE),
SDStars = sd(stars, na.rm = TRUE)
)
# =============================================================================
# 2.	Create a tibble named ramen_stats that groups the data by style and
#     calculates the mean stars and standard deviation for each style.
ramen_stats <- ramen %>%
group_by(Style) %>%
summarize(
MeanStars = mean(stars, na.rm = TRUE),
SDStars = sd(stars, na.rm = TRUE)
)
# =============================================================================
# 2.	Create a tibble named ramen_stats that groups the data by style and
#     calculates the mean stars and standard deviation for each style.
ramen_stats <- ramen %>%
group_by(style) %>%
summarize(
MeanStars = mean(stars, na.rm = TRUE),
SDStars = sd(stars, na.rm = TRUE)
)
# =============================================================================
# 2.	Create a tibble named ramen_stats that groups the data by style and
#     calculates the mean stars and standard deviation for each style.
ramen_stats <- ramen %>%
group_by(Style) %>%
summarize(
MeanStars = mean(Stars, na.rm = TRUE),
SDStars = sd(Stars, na.rm = TRUE)
)
# =============================================================================
# 2.	Create a tibble named ramen_stats that groups the data by style and
#     calculates the mean stars and standard deviation for each style.
ramen_stats <- ramen %>%
group_by(Style) %>%
summarize(
MeanStars = mean(as.numeric(Stars), na.rm = TRUE),
SDStars = sd(as.numeric(Stars), na.rm = TRUE)
)
ggplot(ramen_stats,
aes(x = Style, y = MeanStars, fill = Style)) + geom_col()
print(ramen_stats)
print(ramen)
ggplot(ramen_stats,
aes(x = Style, y = MeanStars, fill = Style)) +
geom_col() +
goem_errorbar(aes(ymin = MeanStars - SDStars,
ymax = MeanStars + SDStars),
width = 0.2)
ggplot(ramen_stats,
aes(x = Style, y = MeanStars, fill = Style)) +
geom_col() +
geom_errorbar(aes(ymin = MeanStars - SDStars,
ymax = MeanStars + SDStars),
width = 0.2)
ggplot(data = map_data("world"),
aes(x = long, y = lat, group = group)) +
geom_polygon(fill= "green", color = "blue") +
coord_quickmap() +
labs(title = "Map of the World") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = map_data("world"),
aes(x = long, y = lat, group = group)) +
geom_polygon(fill= "lightgreen", color = "black") +
coord_quickmap() +
theme(
panel.background = element_rect(fill = "lightblue"),
plot.background = element_rect(fill = "lightblue"),
panel.grid = element_blank()
)
mean_ratings <- ramen %>%
group_by(Country) %>%
summarize(MeanRating = mean(Stars, na.rm = TRUE))
mean_ratings <- ramen %>%
group_by(Country) %>%
summarize(MeanRating = mean(as.numeric(Stars), na.rm = TRUE))
print(mean_ratings)
ggplot(mean_ratings, aes(x = Country, y = MeanRating, color = Country)) #+
ggplot(mean_ratings, aes(x = Country, y = MeanRating, color = Country)) +
geom_point(size = 3) # help with readability
ggplot(mean_ratings, aes(x = Country, y = MeanRating, color = Country)) +
geom_point(size = 3) +
labs(title = "Crystal Hollis") +
theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
ggplot(mean_ratings, aes(x = Country, y = MeanRating, color = Country)) +
geom_point(size = 3) +
labs(title = "Crystal Hollis") +
scale_color_viridis_d() +
theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
ggplot(mean_ratings, aes(x = Country, y = MeanRating, color = Country)) +
geom_point(size = 3) +
labs(title = "Crystal Hollis") +
scale_color_viridis_a() +
theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
ggplot(mean_ratings, aes(x = Country, y = MeanRating, color = Country)) +
geom_point(size = 3) +
labs(title = "Crystal Hollis") +
scale_color_viridis_b() +
theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
ggplot(mean_ratings, aes(x = Country, y = MeanRating, color = Country)) +
geom_point(size = 3) +
labs(title = "Crystal Hollis") +
scale_color_viridis_c() +
theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
ggplot(mean_ratings, aes(x = Country, y = MeanRating, color = Country)) +
geom_point(size = 3) +
labs(title = "Crystal Hollis") +
scale_color_viridis_d() +
theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
ggplot(mean_ratings, aes(x = Country, y = MeanRating, color = Country)) +
geom_point(size = 3) +
labs(title = "Crystal Hollis") +
theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
#the default colors are difficult to distinguish, but since we know it is
# in alphabetical order, I decided to use an alternating color pattern.
country_colors <- rep(c("red", "blue", "green", "orange", "purple", "brown", "pink", "black"),
length.out = nrow(mean_ratings))
theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
ggplot(mean_ratings, aes(x = Country, y = MeanRating, color = Country)) +
geom_point(size = 3) +
labs(title = "Crystal Hollis") +
scale_color_manual(values = country_colors) +
theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
ggplot(mean_ratings, aes(x = Country, y = MeanRating, color = Country)) +
geom_point(size = 3) +
labs(title = "Crystal Hollis - Country by Alphabetical Order") +
scale_color_manual(values = country_colors) + # the exact colors are presented in order so they alternate
theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
ggplot(mean_ratings, aes(x = Country, y = MeanRating, color = Country)) +
geom_point(size = 3) +
labs(title = "Crystal Hollis - Mean Ramen Ratings by Country (Alphabetical Order") +
scale_color_manual(values = country_colors) + # the exact colors are presented in order so they alternate
theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
ggplot(mean_ratings, aes(x = Country, y = MeanRating, color = Country)) +
geom_point(size = 3) +
labs(title = "Crystal Hollis - Average Ramen Ratings per Country (Alphabetical Order") +
scale_color_manual(values = country_colors) + # the exact colors are presented in order so they alternate
theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
ggplot(mean_ratings, aes(x = Country, y = MeanRating, color = Country)) +
geom_point(size = 3) +
labs(title = "Crystal Hollis - Average Ramen Ratings per Country (Alphabetical Order)") +
scale_color_manual(values = country_colors) + # the exact colors are presented in order so they alternate
theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
library(maps) # loading library
world <- map_data("world") # map data
mean_ratings$Country[mean_ratings$Country == "Hong Kong"] <- "China"
# The world map does not distinguish Hong Kong and China. So I combined
# Hong Kong and China.
mean_ratings <- mean_ratings %>%
group_by(Country) %>%
summarize(MeanRating = mean(MeanRating, na.rm = TRUE))
unique(world$region)
world <- map_data("world") # map data
mean_ratings$Country[mean_ratings$Country == "Hong Kong"] <- "China"
mean_ratings$Country[mean_ratings$Country == "Sarawak"] <- "Malaysia"
mean_ratings <- mean_ratings %>%
group_by(Country) %>%
summarize(MeanRating = mean(MeanRating, na.rm = TRUE))
world_data <- left_join(world, mean_ratings, by = c("region" = "Country"))
mean_ratings <- mean_ratings %>%
group_by(Country) %>%
summarize(MeanRating = mean(as.numeric(MeanRating), na.rm = TRUE))
# Join mean_ratings with map data
world_data <- left_join(world, mean_ratings, by = c("region" = "Country"))
ggplot(world_data, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = MeanRating), color = "black") +
scale_fill_viridis_c(option = "plasma", na.value = "gray90") +
coord_quickmap() +
labs(
title = "Crystal Hollis – Average Ramen Ratings by Country",
fill = "Mean Stars"
) +
theme(
panel.background = element_rect(fill = "lightblue"),
plot.background = element_rect(fill = "lightblue"),
panel.grid = element_blank()
)
# World Map with 4.0 being Green to 1.5 being Yellow
ggplot(data = world_map_data, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = MeanRating), color = "black") +
coord_quickmap() +
scale_fill_gradientn(
colors = c("yellow", "green"),
values = scales::rescale(c(1.5, 4.0)),
name = "Mean Stars"
) +
labs(title = "Crystal Hollis – Average Ramen Ratings by Country") +
theme(
panel.background = element_rect(fill = "lightblue"),
plot.background = element_rect(fill = "lightblue"),
panel.grid = element_blank()
)
# World Map with 4.0 being Green to 1.5 being Yellow
ggplot(data = world_data, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = MeanRating), color = "black") +
coord_quickmap() +
scale_fill_gradientn(
colors = c("yellow", "green"),
values = scales::rescale(c(1.5, 4.0)),
name = "Mean Stars"
) +
labs(title = "Crystal Hollis – Average Ramen Ratings by Country") +
theme(
panel.background = element_rect(fill = "lightblue"),
plot.background = element_rect(fill = "lightblue"),
panel.grid = element_blank()
)
# World Map with 4.0 being Green to 1.5 being Yellow
ggplot(data = world_data, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = MeanRating), color = "black") +
coord_quickmap() +
scale_fill_gradientn(
colors = c("red", "darkgreen"),
values = scales::rescale(c(1.5, 4.0)),
name = "Mean Stars"
) +
labs(title = "Crystal Hollis – Average Ramen Ratings by Country") +
theme(
panel.background = element_rect(fill = "lightblue"),
plot.background = element_rect(fill = "lightblue"),
panel.grid = element_blank()
)
# World Map with 4.0 being Green to 1.5 being Yellow
ggplot(data = world_data, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = MeanRating), color = "black") +
coord_quickmap() +
scale_fill_gradientn(
colors = c("red", "green"),
values = scales::rescale(c(1.5, 4.0)),
name = "Mean Stars"
) +
labs(title = "Crystal Hollis – Mean Ramen Ratings (by Country)") +
theme(
panel.background = element_rect(fill = "lightblue"),
plot.background = element_rect(fill = "lightblue"),
panel.grid = element_blank()
)
ggplot(data = world_data, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = MeanRating), color = "black") +
coord_quickmap() +
scale_fill_gradientn(
colors = c("red", "green"),
values = scales::rescale(c(1.5, 4.0)),
name = "Mean Stars"
) +
labs(title = "Crystal Hollis – Average Ratings of Ramen by Country of Manufacture") +
theme(
panel.background = element_rect(fill = "lightblue"),
plot.background = element_rect(fill = "lightblue"),
panel.grid = element_blank()
)
ggplot(data = world_data, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = MeanRating), color = "black") +
coord_quickmap() +
geom_text(data = subset(world_data, !is.na(MeanRating)),
aes(label = round(MeanRating, 1)),
size = 2.5, color = "black") +
scale_fill_gradientn(
colors = c("red", "green"),
values = scales::rescale(c(1.5, 4.0)),
name = "Mean Stars"
) +
labs(title = "Crystal Hollis – Average Ratings of Ramen by Country of Manufacture") +
theme(
panel.background = element_rect(fill = "lightblue"),
plot.background = element_rect(fill = "lightblue"),
panel.grid = element_blank()
)
ggplot(data = world_data, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = MeanRating), color = "black") +
coord_quickmap() +
scale_fill_gradientn(
colors = c("red", "green"),
values = scales::rescale(c(1.5, 4.0)),
name = "Mean Stars"
) +
labs(title = "Crystal Hollis – Average Ratings of Ramen by Country of Manufacture") +
theme(
panel.background = element_rect(fill = "lightblue"),
plot.background = element_rect(fill = "lightblue"),
panel.grid = element_blank()
)
geom_text(data = subset(world_data, !is.na(MeanRating)),
aes(label = round(MeanRating, 1)),
size = 2.5, color = "black")
# LAB 9 INSTRUCTIONS: More Visualization for the Ramen Data
# =============================================================================
getwd()
# Set Directory:
# Copy and paste filepath
setwd("/Users/magnamediaartsllc/GitHub/DallasCollege_Portfolio/ITSE2309_DatabaseProgramming/Lab9/data")
# Verify Current Directory
getwd() #should be ~/Lab8/data
library(tidyverse)
data <- read_csv("numbers.csv")
data$Num
This code shows the values of the **Num** column.
data <- read_csv("numbers.csv")
library(tidyverse)
data <- read_csv("numbers.csv")
# Lab 10 R Markdown – Crystal Hollis
